/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.BigIdea;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-03-03T14:05:28.679-06:00")

@Api(value = "big-ideas", description = "the big-ideas API")
public interface BigIdeasApi {

    @ApiOperation(value = "Create A Big Idea", nickname = "create", notes = "", response = BigIdea.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = BigIdea.class) })
    @RequestMapping(value = "/big-ideas",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<BigIdea> create(@ApiParam(value = "" ,required=true )  @Valid @RequestBody BigIdea bigIdea);


    @ApiOperation(value = "Delete a Big Idea by ID", nickname = "delete", notes = "", response = BigIdea.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BigIdea.class) })
    @RequestMapping(value = "/big-ideas/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<BigIdea> delete(@Min(1)@ApiParam(value = "ID of specific Big Idea",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Get A Big Idea By ID", nickname = "get", notes = "", response = BigIdea.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BigIdea.class),
        @ApiResponse(code = 400, message = "Not a valid ID"),
        @ApiResponse(code = 404, message = "Big Idea not found") })
    @RequestMapping(value = "/big-ideas/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<BigIdea> get(@Min(1)@ApiParam(value = "ID of specific Big Idea",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Get All Your Big Ideas", nickname = "getAll", notes = "", response = BigIdea.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BigIdea.class, responseContainer = "List") })
    @RequestMapping(value = "/big-ideas",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<BigIdea>> getAll(@Min(1)@ApiParam(value = "Choose how many big ideas you want back (if not specified, all will be returned)") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Update Rating of a Big Idea by ID", nickname = "update", notes = "", response = BigIdea.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BigIdea.class) })
    @RequestMapping(value = "/big-ideas/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<BigIdea> update(@Min(1)@ApiParam(value = "ID of specific Big Idea",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody BigIdea updatedBigIdea);

}
